<?php

namespace SiteRising\AionShopBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ItemsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemsRepository extends EntityRepository
{
    //Filtre item Cuir PVP
      
    public function byCuirEmpla($type){
        
        $qb = $this->createQueryBuilder('empla')
                ->select('empla')
                ->where('empla.type = :type AND empla.emplacement = :emplacement')
                ->orderBy('empla.id')
                ->setParameter('type', 'Cuir')
                ->setParameter('emplacement', $type);
         return $qb->getQuery()->getResult();
    }
    
    
    // Filtre Item Cuir-Magique PVP
    
    public function byCuirMagiqueEmpla($type){
        
        $qb = $this->createQueryBuilder('empla')
                ->select('empla')
                ->where('empla.type = :type AND empla.emplacement = :emplacement')
                ->orderBy('empla.id')
                ->setParameter('type', 'Cuir Magique')
                ->setParameter('emplacement', $type);
         return $qb->getQuery()->getResult();
    }
    
    //Filtre Item Maille PVP
    
    public function byMailleEmpla($type){
        
        $qb = $this->createQueryBuilder('empla')
                ->select('empla')
                ->where('empla.type = :type AND empla.emplacement = :emplacement')
                ->orderBy('empla.id')
                ->setParameter('type', 'Maille')
                ->setParameter('emplacement', $type);
         return $qb->getQuery()->getResult();
    }
    
    //Filtre Item Maille-Physique PVP
    
     public function byMaillePhysiqueEmpla($type){
        
        $qb = $this->createQueryBuilder('empla')
                ->select('empla')
                ->where('empla.type = :type AND empla.emplacement = :emplacement')
                ->orderBy('empla.id')
                ->setParameter('type', 'Maille Physique')
                ->setParameter('emplacement', $type);
         return $qb->getQuery()->getResult();
    }
    
    //Filtre Item Tissu PVP
    
     public function byTissuEmpla($type){
        
        $qb = $this->createQueryBuilder('empla')
                ->select('empla')
                ->where('empla.type = :type AND empla.emplacement = :emplacement')
                ->orderBy('empla.id')
                ->setParameter('type', 'Tissu')
                ->setParameter('emplacement', $type);
         return $qb->getQuery()->getResult();
    }
    
    //Filtre Item Plate PVP
      
     public function byPlateEmpla($type){
        
        $qb = $this->createQueryBuilder('empla')
                ->select('empla')
                ->where('empla.type = :type AND empla.emplacement = :emplacement')
                ->orderBy('empla.id')
                ->setParameter('type', 'Plate')
                ->setParameter('emplacement', $type);
         return $qb->getQuery()->getResult();
    }
    
    //Filtre Armes PVP
      
    public function byArmeEmpla($arme){
        
        $qb = $this->createQueryBuilder('empla')
                ->select('empla')
                ->where('empla.type = :type AND empla.categorieArme = :categorieArme AND empla.categorie = :categorie')
                ->orderBy('empla.id')
                ->setParameter('type', 'Arme')
                ->setParameter('categorieArme', $arme)
                ->setParameter('categorie', 'Item PvP');
         return $qb->getQuery()->getResult();
    }
    
    //Filtre Bijoux
    
    public function byBijoux($bijoux){
        
        $qb = $this->createQueryBuilder('empla')
                ->select('empla')
                ->where('empla.type = :type AND empla.emplacementBijoux = :emplacementBijoux')
                ->orderBy('empla.id')
                ->setParameter('type', 'Bijoux')
                ->setParameter('emplacementBijoux', $bijoux);
         return $qb->getQuery()->getResult();
    }
    
    //Filtre Pierre de Mana
    
    public function byEnchantEmpla($enchant){
        
        $qb = $this->createQueryBuilder('enchant')
                ->select('enchant')
                ->where('enchant.type = :type AND enchant.emplacementEnchant = :emplacementEnchant')
                ->orderBy('enchant.id')
                ->setParameter('type', 'Pierre de Mana')
                ->setParameter('emplacementEnchant', $enchant);
         return $qb->getQuery()->getResult();
    }
    
    //Filtre Nourriture
    
    public function byNourriture(){
        
         $qb = $this->createQueryBuilder('food')
                ->select('food')
                ->where('food.type = :type')
                ->orderBy('food.id')
                ->setParameter('type', 'Nourriture');
         return $qb->getQuery()->getResult();
    }
    
    //Filtre Familier
    
    public function byFamiliers(){
        
         $qb = $this->createQueryBuilder('pet')
                ->select('pet')
                ->where('pet.type = :type')
                ->orderBy('pet.id')
                ->setParameter('type', 'Familier');
         return $qb->getQuery()->getResult();
    }
    
    //Filtre Monture
    
    public function byMonture(){
        
         $qb = $this->createQueryBuilder('mount')
                ->select('mount')
                ->where('mount.type = :type')
                ->orderBy('mount.id')
                ->setParameter('type', 'Monture');
         return $qb->getQuery()->getResult();
    }
    
    //Filtre Autres
    
    public function byAutre($autre){
        
        $qb = $this->createQueryBuilder('other')
                ->select('other')
                ->where('other.type = :type AND other.emplacementAutre = :emplacementAutre')
                ->orderBy('other.id')
                ->setParameter('type', 'Autre')
                ->setParameter('emplacementAutre', $autre);      
         return $qb->getQuery()->getResult();
    }
    
    //Filtre Arme PvE
    
    public function byArmePvE($arme){
        
         $qb = $this->createQueryBuilder('weapon')
                ->select('weapon')
                ->where('weapon.type = :type AND weapon.categorie = :categorie AND weapon.categorieArme = :categorieArme')
                ->orderBy('weapon.id')
                ->setParameter('type', 'Arme')
                ->setParameter('categorie', 'Item PvE')
                ->setParameter('categorieArme', $arme);
         return $qb->getQuery()->getResult();
    }
    
    //Filtre Ailes
    
     public function byAiles(){
        
         $qb = $this->createQueryBuilder('wings')
                ->select('wings')
                ->where('wings.type = :type')
                ->orderBy('wings.id')
                ->setParameter('type', 'Ailes');
         return $qb->getQuery()->getResult();
    }
    
}
